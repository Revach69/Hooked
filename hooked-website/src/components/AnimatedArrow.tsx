"use client";

import { useEffect, useState } from 'react';

interface AnimatedArrowProps {
  width?: number;
  height?: number;
  color?: string;
  duration?: number;
  isMobile?: boolean;
}

export default function AnimatedArrow({ 
  width = 100, 
  height = 100, 
  color = "#4C1D95", // Dark purple
  duration = 2000,
  isMobile = false 
}: AnimatedArrowProps) {
  const [isVisible, setIsVisible] = useState(false);
  const [lineDrawn, setLineDrawn] = useState(false);

  useEffect(() => {
    // Trigger animation when component mounts
    setIsVisible(true);
    
    // Draw the line first
    const lineTimer = setTimeout(() => {
      setLineDrawn(true);
    }, duration * 0.7); // Line draws for 70% of total duration

    return () => {
      clearTimeout(lineTimer);
    };
  }, [duration]);

  // Desktop arrow - using the actual SVG file
  const desktopArrow = (
    <svg 
      width={width} 
      height={height} 
      viewBox="0 0 1024 1024" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      style={{
        filter: `drop-shadow(0 2px 4px rgba(0,0,0,0.1))`
      }}
    >
      <defs>
        <linearGradient id="arrowGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor={color} stopOpacity="0.8" />
          <stop offset="100%" stopColor={color} stopOpacity="1" />
        </linearGradient>
      </defs>
      
      {/* Main curved path - animated */}
      <path
        d="M313.252655,564.747253 C352.107239,601.755249 395.191650,631.803223 444.828522,651.795654 C480.248260,666.061829 516.717224,676.704407 554.688049,681.752258 C562.573914,682.800598 570.429749,684.087463 578.283752,685.360901 C584.476990,686.365112 585.321167,685.758301 586.796143,679.657104 C592.812073,654.772522 597.032654,629.551270 599.371155,604.100403 C600.707153,589.559204 602.694519,575.044189 602.809265,560.370239 C602.880432,551.270630 604.666199,542.317139 607.621338,533.649048 C608.553711,530.914001 609.675903,528.160767 612.174377,526.662781 C617.174805,523.664673 620.737732,519.372375 624.095764,514.777100 C626.116333,512.012024 628.439270,510.482056 631.256226,514.021851 C632.117249,515.103699 633.454163,516.143188 634.707397,515.227478 C638.534607,512.431091 640.982056,515.196594 643.357666,517.311768 C654.422546,527.163513 665.430908,537.080872 676.344971,547.099365 C696.962646,566.025146 718.442383,583.943115 739.870422,601.930298 C769.600037,626.886047 799.301575,651.871399 830.408020,675.117859 C839.879883,682.196228 849.512024,689.060120 859.072693,696.019531 C866.045715,701.095337 866.006470,706.227722 859.848450,712.217896 C854.937866,716.994690 851.602600,723.320007 850.657898,729.967896 C849.646057,737.087769 845.328552,739.927185 839.620972,741.884766 C824.846130,746.952454 810.025879,751.888245 795.207336,756.827393 C769.036255,765.550476 743.127930,774.992798 717.321960,784.743591 C681.531982,798.266846 645.598877,811.410889 609.770691,824.833801 C592.770935,831.202698 575.963867,838.146973 559.933044,846.632202 C554.137390,849.699951 548.221069,851.363953 541.617188,853.121460 C542.131470,849.416809 540.443665,846.753723 538.102417,844.129150 C535.953918,841.720764 536.569214,838.559082 537.139526,835.530334 C537.859680,831.706116 537.871033,828.110840 536.834412,824.021851 C534.975525,816.689880 538.558411,809.774475 542.019348,803.409241 C550.839294,787.187561 560.522339,771.401428 566.366760,753.733521 C568.559631,747.104614 570.398010,740.355591 572.697693,733.765930 C573.882141,730.371887 573.135376,728.942688 569.559448,728.310547 C552.235229,725.248352 534.793823,722.657715 517.665466,718.719055 C484.244629,711.033997 451.701111,700.750366 420.291229,686.559692 C385.413330,670.802246 353.520569,650.467407 323.500031,627.106628 C297.863495,607.157288 276.563965,582.846863 256.543732,557.360840 C234.725189,529.585571 216.524063,499.645203 201.695038,467.629822 C185.550079,432.773407 173.495285,396.595917 166.911850,358.685669 C162.658096,334.190704 160.526428,309.506195 161.786224,284.660370 C162.416031,272.239410 164.821732,259.988129 166.842560,247.692154 C169.091217,234.009872 173.041962,220.861084 176.714508,207.604599 C179.165024,198.759216 183.491653,190.626358 188.064194,182.720383 C191.492935,176.792023 197.490112,173.398087 203.030975,169.758499 C206.340378,167.584656 208.287949,168.947006 208.303909,173.039261 C208.309631,174.504410 208.069199,176.036011 207.609283,177.427612 C201.453949,196.051712 197.155838,215.108078 193.052856,234.287430 C188.452194,255.793106 186.724823,277.510712 187.648483,299.203766 C189.024078,331.510742 195.525009,363.118988 205.957886,393.793884 C226.091049,452.989441 257.576355,505.419220 300.257050,551.116272 C304.461517,555.617859 308.748566,560.042358 313.252655,564.747253"
        fill={color}
        stroke="currentColor"
        className="text-white dark:text-gray-900"
        strokeWidth="12"
        strokeLinecap="round"
        strokeDasharray={isVisible ? "2000" : "0"}
        strokeDashoffset={isVisible ? "0" : "2000"}
        style={{
          transition: `stroke-dashoffset ${duration * 0.7}ms ease-in-out`,
        }}
      />
      
      {/* Arrowhead - appears after line is drawn */}
      <g opacity={lineDrawn ? "1" : "0"} style={{ transition: `opacity ${duration * 0.3}ms ease-in-out` }}>
        <path
          d="M730.538208,695.628479 C747.494141,694.780396 764.462830,694.608215 781.436035,694.633789 C782.870361,694.635986 784.535461,694.921082 785.372253,692.334412 C739.073730,653.323486 691.166016,615.887634 645.224304,575.150024 C644.538269,579.103577 643.733093,582.494995 643.389893,585.932495 C641.707520,602.784424 639.444519,619.561401 636.810242,636.283203 C634.203735,652.828308 631.285461,669.322815 627.550171,685.662048 C626.918518,688.424866 627.319519,690.439270 631.026672,690.696350 C644.285339,691.615784 657.550598,692.524719 670.804810,693.445862 C690.350830,694.804260 709.980469,694.960022 730.538208,695.628479"
          fill="currentColor"
          className="text-white dark:text-gray-900"
          stroke={color}
          strokeWidth="3"
          opacity="0.9"
        />
        <path
          d="M628.249268,733.385437 C625.586426,733.309509 622.910156,733.374207 620.264221,733.121155 C617.140015,732.822327 615.203796,733.832520 614.402771,737.036072 C611.129150,750.129028 605.444214,762.386475 601.094666,775.108337 C600.560730,776.670044 599.749268,778.200073 601.551575,780.603699 C637.822266,767.237366 674.319824,753.787354 710.880676,740.314026 C709.927124,738.116272 708.479675,738.402588 707.213623,738.274963 C693.808472,736.923706 680.329468,737.047180 666.898987,736.256165 C654.316284,735.515015 641.757446,734.369141 628.249268,733.385437"
          fill="currentColor"
          className="text-white dark:text-gray-900"
          stroke={color}
          strokeWidth="2"
          opacity="0.7"
        />
      </g>
    </svg>
  );

  // Mobile arrow - using the actual mobile SVG file
  const mobileArrow = (
    <svg 
      width={width} 
      height={height} 
      viewBox="0 0 100 100" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      style={{
        filter: `drop-shadow(0 2px 4px rgba(0,0,0,0.1))`
      }}
    >
      <defs>
        <linearGradient id="mobileArrowGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor={color} stopOpacity="0.8" />
          <stop offset="100%" stopColor={color} stopOpacity="1" />
        </linearGradient>
      </defs>
      
      {/* Main vertical path - animated */}
      <path
        d="m100.1 19.4q0 0.1 0 0.3-0.1 0-0.2 0.1-0.3 1.6-0.7 3.1-0.7 3.1-1.5 6.3-0.5 2.3-1.1 4.6-0.8 3.4-1.6 6.9-0.7 2.6-1.3 5.2-0.7 3.1-1.5 6.2-0.5 2.3-1.1 4.6-0.8 3.5-1.6 6.9-0.6 2.2-1.1 4.3-0.8 3.4-1.6 6.9-0.6 2.6-1.3 5.2-0.8 3.2-1.5 6.4-0.6 2.6-1.2 5.1-0.8 3.2-1.6 6.4-0.2 1.1-0.5 2.2-0.1 0-0.2 0-0.1-0.1-0.1-0.2-1.6-0.3-3.2-0.7-3.1-0.7-6.2-1.5-2.3-0.5-4.6-1.1-3.5-0.8-6.9-1.6-2.6-0.7-5.2-1.3-3.1-0.7-6.3-1.5-2.3-0.5-4.6-1.1-3.4-0.8-6.9-1.6-2.1-0.6-4.2-1.1-3.5-0.8-7-1.6-2.6-0.6-5.2-1.3-3.1-0.8-6.3-1.5-2.6-0.6-5.2-1.2-3.1-0.8-6.3-1.6-1.1-0.2-2.2-0.5 0-0.1 0-0.2 0.1-0.1 0.1-0.1 0.4-1.6 0.8-3.2 0.7-3.1 1.4-6.2 0.6-2.3 1.2-4.6 0.8-3.5 1.6-6.9 0.6-2.6 1.3-5.2 0.7-3.1 1.4-6.3 0.6-2.3 1.2-4.6 0.8-3.4 1.6-6.9 0.5-2.1 1-4.2 0.9-3.5 1.7-7 0.6-2.6 1.2-5.2 0.8-3.1 1.6-6.3 0.6-2.6 1.2-5.2 0.8-3.1 1.5-6.3 0.3-1.1 0.5-2.2 0.1 0 0.3 0 0 0.1 0.1 0.1 1.6 0.4 3.1 0.8 3.1 0.7 6.3 1.4 2.3 0.6 4.6 1.2 3.4 0.8 6.9 1.6 2.6 0.6 5.2 1.3 3.1 0.7 6.2 1.4 2.3 0.6 4.6 1.2 3.5 0.8 6.9 1.6 2.2 0.5 4.3 1 3.4 0.9 6.9 1.7 2.6 0.6 5.2 1.2 3.2 0.8 6.4 1.6 2.6 0.6 5.1 1.2 3.2 0.8 6.4 1.5 1.1 0.3 2.2 0.5zm-42 16.1c4.3 7.3 5.4 15.2 4.2 23.6q-0.2 0-0.4 0c-1.5-0.1-3-0.1-4.5-0.3-1.5-0.1-3.1-0.4-4.7-0.6q-1.3-0.2-2.6-0.2c-0.3-0.1-0.6 0.1-0.9 0.3-0.3 0.1-0.6 0.3-0.9 0.5q-0.2 0.2-0.5 0.3c0.2 0.3 0.5 0.6 0 0.8q0.1 0.3 0.3 0.6c1.4 2.7 2.9 5.4 4.3 8.2 1.5 3.1 3 6.2 4.5 9.4 0.4 0.9 0.8 1.8 1.2 2.8 0.2 0.4 0.6 0.6 0.9 0.3 0.6-0.4 1.3-0.5 1.9-0.5 0.4 0 0.6-0.1 0.8-0.3q0.5-0.9 1.1-1.7c1.2-1.9 2.3-3.8 3.5-5.6 1-1.5 2-2.9 3-4.4 1.3-1.9 2.6-3.9 3.9-5.8 0.8-1.2 1.8-2.2 2.7-3.3q0-0.1 0.1-0.2c0.1-0.2 0.1-0.4 0.2-0.6q-0.2-0.2-0.5-0.4c-0.2-0.1-0.3-0.3-0.5-0.3-0.4 0-0.8-0.1-1.2-0.3-0.5-0.1-1-0.1-1.4 0-1.2 0.3-2.3 0.7-3.5 0.9-1.1 0.2-2.1 0.2-3.2 0.3 0-0.3 0-0.5 0-0.8 0.2-2.4 0.3-4.7 0.2-7.1q-0.3-4.8-1.8-9.3c-1.1-3.5-2.6-6.6-4.8-9.5-2.2-3.1-4.8-5.8-7.9-8.1q-4.8-3.6-10.5-5.5c-2.1-0.6-4.3-0.8-6.4-0.9-1.1 0-2.2 0.1-3.3 0.3q-1.4 0.1-2.4 1.1c-0.1 0.1-0.2 0.2-0.2 0.3 0 0.1 0.2 0.2 0.3 0.2q0.2 0 0.3 0 1.2-0.1 2.3-0.1c1.7-0.1 3.3 0 4.9 0.2 2.3 0.4 4.5 1.1 6.6 2.1 3.6 1.6 6.7 3.9 9.4 6.6q3.2 3.1 5.5 7z"
        fill={color}
        stroke="currentColor"
        className="text-white dark:text-gray-900"
        strokeWidth="6"
        strokeDasharray={isVisible ? "800" : "0"}
        strokeDashoffset={isVisible ? "0" : "800"}
        style={{
          transition: `stroke-dashoffset ${duration * 0.7}ms ease-in-out`,
        }}
      />
      
      {/* Arrowhead - appears after line is drawn */}
      <g opacity={lineDrawn ? "1" : "0"} style={{ transition: `opacity ${duration * 0.3}ms ease-in-out` }}>
        <path
          d="m58 35.5q-2.2-3.9-5.4-7c-2.7-2.7-5.8-5-9.4-6.6-2.1-1-4.3-1.7-6.6-2.1-1.6-0.2-3.2-0.3-4.9-0.2q-1.1 0-2.3 0.1-0.1 0-0.3 0c-0.1 0-0.3-0.1-0.3-0.2 0-0.1 0.1-0.2 0.2-0.3q1-1 2.4-1.1c1.1-0.2 2.2-0.3 3.3-0.3 2.1 0.1 4.3 0.3 6.4 0.9q5.7 1.9 10.5 5.5c3.1 2.3 5.7 5 7.9 8.1 2.2 2.9 3.7 6 4.8 9.5q1.5 4.5 1.8 9.3c0.1 2.4 0 4.7-0.2 7.1 0 0.3 0 0.5 0 0.8 1.1-0.1 2.1-0.1 3.2-0.3 1.2-0.2 2.3-0.6 3.5-0.9 0.4-0.1 0.9-0.1 1.4 0 0.4 0.2 0.8 0.3 1.2 0.3 0.2 0 0.3 0.2 0.5 0.3q0.3 0.2 0.5 0.4c-0.1 0.2-0.1 0.4-0.2 0.6q-0.1 0.1-0.1 0.2c-0.9 1.1-1.9 2.1-2.7 3.3-1.3 1.9-2.6 3.9-3.9 5.8-1 1.5-2 2.9-3 4.4-1.2 1.8-2.3 3.7-3.5 5.6q-0.6 0.8-1.1 1.7c-0.2 0.2-0.4 0.3-0.8 0.3-0.6 0-1.3 0.1-1.9 0.5-0.3 0.3-0.7 0.1-0.9-0.3-0.4-1-0.8-1.9-1.2-2.8-1.5-3.2-3-6.3-4.5-9.4-1.4-2.8-2.9-5.5-4.3-8.2q-0.2-0.3-0.3-0.6c0.5-0.2 0.2-0.5 0-0.8q0.3-0.1 0.5-0.3c0.3-0.2 0.6-0.4 0.9-0.5 0.3-0.2 0.6-0.4 0.9-0.3q1.3 0 2.6 0.2c1.6 0.2 3.2 0.5 4.7 0.6 1.5 0.2 3 0.2 4.5 0.3q0.2 0 0.4 0c1.2-8.4 0.1-16.3-4.3-23.6zm6.1 34.8q0.1-0.3 0.3-0.5 1.9-2.8 3.7-5.7 0.8-1.1 1.6-2.3-2.2 0.3-4.3 0.5-0.1 0.2-0.1 0.4-0.3 2.1-0.7 4.2-0.3 1.7-0.7 3.4 0 0.1 0.1 0.1 0 0 0.1-0.1zm-8.1-8.3q-1.8-0.2-3.6-0.4c2.4 4.4 4.5 9 6.8 13.6 1.2-4.2 2.1-8.5 2.7-13-0.8 0-1.6 0.1-2.4 0-1.1 0-2.3-0.1-3.5-0.2z"
          fill="currentColor"
          className="text-white dark:text-gray-900"
          stroke={color}
          strokeWidth="2"
          opacity="0.9"
        />
      </g>
    </svg>
  );

  return (
    <div className="flex items-center justify-center">
      {isMobile ? mobileArrow : desktopArrow}
    </div>
  );
} 