rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== EVENTS COLLECTION =====
    match /events/{eventId} {
      // ✅ Everyone can read events (for joining)
      allow read: if true;
      
      // ✅ Only authenticated users (admins) can create/modify events
      allow write: if request.auth != null;
    }
    
    // ===== EVENT PROFILES COLLECTION =====
    match /event_profiles/{profileId} {
      // ✅ Everyone can read profiles for active events
      allow read: if true;
      
      // ✅ Anyone can create profiles (mobile app)
      allow create: if true;
      
      // ✅ Users can update their own profile (session-based)
      allow update: if 
        resource.data.session_id == request.resource.data.session_id;
      
      // ✅ Users can delete their own profile
      // Simplified: allow all profile deletions since mobile app doesn't use Firebase Auth
      allow delete: if true;
    }
    
    // ===== LIKES COLLECTION =====
    match /likes/{likeId} {
      // ✅ Everyone can read likes
      allow read: if true;
      
      // ✅ Anyone can create likes
      allow create: if true;
      
      // ✅ Users can update their own likes
      allow update: if 
        resource.data.liker_session_id == request.resource.data.liker_session_id;
      
      // ✅ Users can delete their own likes
      // Simplified: allow all like deletions since mobile app doesn't use Firebase Auth
      allow delete: if true;
    }
    
    // ===== MESSAGES COLLECTION =====
    match /messages/{messageId} {
      // ✅ Everyone can read messages
      allow read: if true;
      
      // ✅ Anyone can create messages
      allow create: if true;
      
      // ✅ Allow message updates for:
      // - Sender can update their own messages (editing)
      // - Recipient can update messages sent to them (marking as seen/read)
      allow update: if 
        // Sender updating their own message
        resource.data.from_profile_id == request.resource.data.from_profile_id ||
        // Recipient marking message as seen/read (only allow seen/is_read/seen_at fields)
        (resource.data.to_profile_id == request.resource.data.to_profile_id &&
         // Ensure core message data doesn't change
         resource.data.event_id == request.resource.data.event_id &&
         resource.data.from_profile_id == request.resource.data.from_profile_id &&
         resource.data.to_profile_id == request.resource.data.to_profile_id &&
         resource.data.content == request.resource.data.content);
      
      // ✅ Users can delete their own messages
      // Simplified: allow all message deletions since mobile app doesn't use Firebase Auth
      allow delete: if true;
    }
    
    // ===== CONTACT SHARES COLLECTION =====
    match /contact_shares/{shareId} {
      // ✅ Everyone can read contact shares
      allow read: if true;
      
      // ✅ Anyone can create contact shares
      allow create: if true;
      
      // ✅ Users can update their own contact shares
      allow update: if 
        resource.data.from_profile_id == request.resource.data.from_profile_id;
      
      // ✅ Users can delete their own contact shares
      // Simplified: allow all contact share deletions since mobile app doesn't use Firebase Auth
      allow delete: if true;
    }
    
    // ===== EVENT FEEDBACK COLLECTION =====
    match /event_feedback/{feedbackId} {
      // ✅ Only authenticated users (admins) can read feedback
      allow read: if true; // Allow mobile app to read reports
      
      // ✅ Anyone can create anonymous feedback
      allow create: if true;
      
      // ✅ No updates allowed (feedback is immutable)
      allow update: if false;
      
      // ✅ Only authenticated users (admins) can delete feedback
      allow delete: if request.auth != null;
    }
    
    // ===== REPORTS COLLECTION =====
    match /reports/{reportId} {
      // ✅ Only authenticated users (admins) can read reports
      allow read: if true; // Allow mobile app to read reports
      
      // ✅ Anyone can create reports (mobile app) - no authentication required
      // Explicitly allow anonymous users to create reports
      allow create: if 
        // Ensure required fields are present
        request.resource.data.event_id is string &&
        request.resource.data.reporter_session_id is string &&
        request.resource.data.reported_session_id is string &&
        request.resource.data.reason is string &&
        request.resource.data.status is string &&
        // Ensure status is valid
        request.resource.data.status in ['pending', 'reviewed', 'resolved', 'dismissed'];
      
      // ✅ Only authenticated users (admins) can update reports
      allow update: if request.auth != null;
      
      // ✅ Only authenticated users (admins) can delete reports
      allow delete: if request.auth != null;
    }

    // ===== KICKED USERS COLLECTION =====
    match /kicked_users/{kickedUserId} {
      // ✅ Anyone can read kicked user records (for mobile app notifications)
      allow read: if true;
      
      // ✅ Only authenticated users (admins) can create kicked user records
      allow create: if request.auth != null;
      
      // ✅ Only authenticated users (admins) can delete kicked user records
      allow delete: if request.auth != null;
    }

    // ===== BLOCKED MATCHES COLLECTION =====
    match /blocked_matches/{blockedMatchId} {
      // ✅ Anyone can read blocked matches (for mobile app filtering)
      allow read: if true;
      
      // ✅ Anyone can create blocked match records (mobile app blocking)
      allow create: if 
        // Ensure required fields are present
        request.resource.data.event_id is string &&
        request.resource.data.blocker_session_id is string &&
        request.resource.data.blocked_session_id is string;
      
      // ✅ Users can delete their own blocked matches
      allow delete: if true; // Simplified for mobile app
      
      // ✅ No updates allowed (blocking is create/delete only)
      allow update: if false;
    }

    // ===== MUTED MATCHES COLLECTION =====
    match /muted_matches/{mutedMatchId} {
      // ✅ Anyone can read muted matches (for mobile app filtering)
      allow read: if true;
      
      // ✅ Anyone can create muted match records (mobile app muting)
      allow create: if 
        // Ensure required fields are present
        request.resource.data.event_id is string &&
        request.resource.data.muter_session_id is string &&
        request.resource.data.muted_session_id is string;
      
      // ✅ Users can delete their own muted matches
      allow delete: if true; // Simplified for mobile app
      
      // ✅ No updates allowed (muting is create/delete only)
      allow update: if false;
    }

    // ===== USERS COLLECTION =====
    match /users/{userId} {
      // ✅ Only authenticated users can access user data
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ===== ADMIN CLIENTS COLLECTION =====
    match /adminClients/{clientId} {
      // ✅ Only authenticated users (admins) can read clients
      allow read: if true; // Allow mobile app to read reports
      
      // ✅ Allow contact form submissions to create clients (no auth required)
      // ✅ Only authenticated users (admins) can create clients manually
      allow create: if 
        request.auth != null || 
        // Allow contact form submissions with specific data structure
        (request.resource.data.source == 'Contact Form' &&
         request.resource.data.status == 'Pre-Discussion' &&
         request.resource.data.pocName is string &&
         request.resource.data.email is string);
      
      // ✅ Only authenticated users (admins) can update clients
      allow update: if request.auth != null;
      
      // ✅ Only authenticated users (admins) can delete clients
      allow delete: if request.auth != null;
    }

    // ===== EVENT FORMS COLLECTION =====
    match /eventForms/{formId} {
      // ✅ Only authenticated users (admins) can read event forms
      allow read: if request.auth != null;
      
      // ✅ Anyone can create event forms (website submissions)
      allow create: if 
        // Ensure required fields are present
        request.resource.data.fullName is string &&
        request.resource.data.email is string &&
        request.resource.data.phone is string &&
        request.resource.data.eventAddress is string &&
        request.resource.data.venueName is string &&
        request.resource.data.eventType is string &&
        request.resource.data.expectedAttendees is string &&
        request.resource.data.eventName is string &&
        request.resource.data.eventDate is string &&
        request.resource.data.posterPreference is string &&
        request.resource.data.eventVisibility is string &&
        request.resource.data.status is string &&
        // Ensure status is valid
        request.resource.data.status in ['New', 'Reviewed', 'Contacted', 'Converted', 'Rejected'] &&
        // Ensure timestamps are present
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      
      // ✅ Only authenticated users (admins) can update event forms
      allow update: if request.auth != null;
      
      // ✅ Only authenticated users (admins) can delete event forms
      allow delete: if request.auth != null;
    }
    
    // ===== PUSH TOKENS COLLECTION =====
    match /push_tokens/{tokenId} {
      // ✅ Anyone can create/update push tokens (mobile app registration)
      // Using merge: true in Firebase Functions, so this handles both create and update
      allow write: if 
        // Ensure required fields are present
        request.resource.data.token is string &&
        request.resource.data.platform is string &&
        request.resource.data.sessionId is string; // Note: using camelCase to match Firebase Functions
      
      // ✅ Anyone can read push tokens (for notification system)
      allow read: if true;
      
      // ✅ Anyone can delete push tokens (for cleanup purposes)
      allow delete: if true;
    }
    
    // ===== NOTIFICATIONS LOG COLLECTION =====
    match /notifications_log/{logId} {
      // ✅ Allow Firebase Functions to read/write notification logs (idempotency)
      allow read, write: if true;
    }
    
    // ===== ANALYTICS COLLECTION =====
    match /analytics/{analyticsId} {
      // ✅ Allow Firebase Functions to write analytics data
      allow write: if true;
      
      // ✅ Only authenticated users (admins) can read analytics
      allow read: if request.auth != null;
    }
    
    // ===== USER SAVED PROFILES COLLECTION =====
    match /user_saved_profiles/{profileId} {
      // ✅ Only authenticated users can access user saved profiles
      allow read, write: if request.auth != null && request.auth.uid == resource.data.user_id;
      
      // ✅ Allow Firebase Functions to create saved profiles
      allow create: if true;
    }
    
    // ===== DEFAULT RULE =====
    // Deny all other operations by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 